안녕하세요.
저희 조는 항공 예약 서비스에 대해 준비해봤습니다.

먼저 목차입니다.
프로젝트 개요, 팀원 소개, 수행 절차, 결과, 마지막으로 자체 평가 순으로 진행하겠습니다.

프로젝트 개요입니다.
저희가 이 주제를 선정하게 된 이유에 대해 말씀드리겠습니다.
우선 이 표를 보시면 작년 1월에서 7월 그리고 올해 1월부터 7월까지의 해외 여행자 수를
나타낸 표입니다. 증감률을 보시면 점점 증가하다가 지난 7월에는 5배 이상 증가한 모습입니다.
이렇게 보다시피 해외여행자 수가 늘어나면서 동시에 해외여행 예약 시스템의 수요 또한 늘어날 것이라 생각해서
항공 예약 서비스를 선택하게 되었습니다. 
또한 SQL 프로젝트 이후에 진행하게 될 프로젝트까지 생각했을 때 연동성이 또한 높다고 생각해서 선택했습니다.

팀원 역할 소개입니다.
저는 crud 생성 및 입력 그리고 발표를 맡았고 안서준님은 테이블 구조 설계와 함수를 제작하였고
장태연님은 데이터 입력과 프로시저를 만들었습니다.

수행 절차 입니다.
테이블을 보기전에 먼저 ER 다이어그램입니다. 각 테이블명과 구성요소를 나타내봤습니다.
밑의 표는 위의 다이어그램을 하나로 보여주는 티켓 테이블을 나타낸 것입니다.

다음은 전체 테이블의 기본키와 연결된 외래키를 나타낸 sql 모델 그림입니다.

저희는 수행절차 부분에서 create, update, delete를 보여주고 뒤의 수행결과에서 read와
프로시저, 함수를 보여드리겠습니다.
먼저 create입니다. 저희의 테이블은 총 5개이며 위 그림은 해당 테이블을 생성하는 쿼리문입니다.
티켓 테이블은 승객이 예약을하고 탑승티켓을 받았을때 보이는 정보들을 나타냈습니다.
패신저 테이블은 해당 승객의 개인정보가 들어있고, flight 테이블은 항공편들의 정보가 들어있습니다.
depart_nation과 arrive_nation은 내용은 같지만 이름은 다른 테이블입니다.
같은 테이블의 두 컬럼에 외래키를 설정하기위해서 이름을 달리해 2개로 나눴습니다.

저희는 테이블을 만들때 외래키를 설정하지않고 이렇게 따로 외래키를 설정해주었습니다.
다음은 입출력을 바꿔주는 쿼리입니다. date 타입의 입출력 형식을 년/월/일에서 시간과 분까지
나타낼 수 있게 변경했습니다.
그리고 티켓 테이블을 생성 시 번호를 부여해주는 시퀀스를 생성했습니다.

인서트입니다. 해당 테이블에 들어가는 형식을 보여주기위해 넣었습니다. 하나 살펴볼것을 짚자면 티켓 테이블에
인서트할때 이전에 생성한 시퀀스를 통해 티켓 번호를 생성해 주는 것입니다. lpad 함수는 지정한 길이 만큼
왼쪽부터 특정 문자로 채워주는 겁니다. 사진에서는 세자리 숫자를 0으로 채워준 뒤 시퀀스 수를
입력해주는 것입니다.

다음은 update와 delete입니다. update에서는 간단하게 기존의 테이블에서 새 컬럼을 추가하고
추가한 컬럼에 데이터를 입력하는 방식으로 했습니다. 여기서 새 데이터를 입력할 때 insert가 아니라
update를 써야하는데, 그 이유는 컬럼을 생성했을 때 해당 컬럼은 전부 null값으로 들어가있기 때문에
update를 통해 null 값을 변경해줘야하기 때문입니다.
delete에서도 간단하게 예약을 취소하는 승객이 있을 경우 티켓을 취소하는 쿼리를 적었습니다.
보시면 티켓번호가 020인 승객을 없앴고 밑의 결과에서 020이 삭제된 결과를 볼 수 있습니다.

다음으로 수행 결과 입니다.
Select문을 통해서 결과를 나타냈습니다.
우선 외래키가 잘 엮여있는지를 확인하기 위해서 모든 테이블을 조인하는 쿼리를 1번에서 적었습니다.
2번은 위의 쿼리와 유사하지만 where을 통해 특정 조건을 넣어봤습니다. 
1번 결과 그림은 원래 더 길게 나오지만 자리때문에 조금만 보이게 잘랐습니다.
2번 실행 결과는 보시면 탑승편이 같은 두 승객의 정보가 출력된 모습을 볼 수 있습니다.

다음은 뷰를 통해 승객의 정보를 조회해 탑승편마다 나이가 가장 많은 승객의 나이와 이름을 출력하게 했습니다.
우선 이름, 나이, 탑승편의 정보를 한 뷰로 만들어 준 다음 그 뷰에서 탑승편과,
해당 탑승편에서 가장 많은 나이를 뽑는 뷰를 또 만들어줍니다.
그래서 두 뷰를 통해서 가장 많은 나이를 가진 승객의 이름을 조인해와서 승객명, 나이, 해당 탑승편을 나타냈습니다.

프로시저입니다. 세 가지의 프로시저가 있는데 첫번째는 신규 취항지를 등록해주는 것입니다. 두번째는 매개변수로
티켓번호를 입력해주고 ticket 테이블에서 해당 번호와 같은 티켓을 삭제해주는 프로시저입니다.
세번째는 승객의 좌석을 변경해주는 것인데 매개변수로 입력받은 티켓번호에 해당하는 승객을 또다른 매개변수인 
changeseat으로 변경해주는것입니다. 우측위의 그림은 실행 쿼리이고 밑은 실행 결과들입니다.

다음은 함수입니다. 함수또한 간단하게 문자열을 반환해주는 함수인데 티켓번호를 매개변수로 받고 
해당 승객의 이름을 반환해주는 함수입니다.

마지막으로 자체 평가 입니다.
우선 저는 각 테이블의 연관성을 끝까지 신경을 써야한다는 것을 알게 됐고 select문을 직접 해보니 
이해가 더 잘 됐던 것 같습니다.
안서준님은 테이블을 설계하면서 내용을 연결해야하는 부분을 생각해야 한다는 점을 알게되었다 라고 적어주셨고
장태연님은 수업 시간에 배운 내용들을 복습할 수 있어 좋았고 다소 부족했던함수와 프로시저에 대해 공부해봐야겠다고
적어주셨습니다.

이상으로 1조 발표를 모두 마치겠습니다. 감사합니다.


