알고리즘 = 목적지까지 가는 절차(방법);
정렬 = 원하는 값을 빨리 찾기 위해 생김.
1. 버블소트 = 가장 간단하지만 비효율적.
왼쪽과 비교했을때 더 크면 좌우 교환한다.
배열의 크기만큼 반복하기 때문에 느리다.
2. 셀렉트소트
배열 중 최솟값 찾고 맨 앞에 위치한 값과 교환
그럼 제일 앞의 수가 크기가 제일 작다
처음 값을 제외한 배열에서 최솟값 찾고 다시 두번째값과 교환
배열의 - 1만큼 반복하게 됨
3. 퀵소트
속도가 가장 빠르지만 복잡하다.
최악의 경우 버블 정렬과 속도가 같다.
분할 정복을 사용.
배열을 반으로 나누고 또 나누고 하는 방식 반복.
배열 중 하나의 요소(pivot)을 고르고 요소보다 작은 값을 피봇의 앞으로 옮김.
재귀함수 사용

자료구조
연결리스트(linked list)
노드(node) - 만든 구조체 안에 구조체를 가리키는 포인터를 포함한다.
head - node1 - node2 연결된 구조라 head에서 node2로 바로 못간다.
node1이 없다면 node2는 쓰레기 데이터가 됨
NODE* node1 = malloc(sizeof(struct NODE));
=node1이라는 구조체의 크기를 할당(구조체 포인터)
